// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameServer.Protocol
{
    public sealed class AnimationDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameServer.Protocol.AnimationData>
    {
        // ObjectID
        private static global::System.ReadOnlySpan<byte> GetSpan_ObjectID() => new byte[1 + 8] { 168, 79, 98, 106, 101, 99, 116, 73, 68 };
        // StateHash
        private static global::System.ReadOnlySpan<byte> GetSpan_StateHash() => new byte[1 + 9] { 169, 83, 116, 97, 116, 101, 72, 97, 115, 104 };
        // LayerID
        private static global::System.ReadOnlySpan<byte> GetSpan_LayerID() => new byte[1 + 7] { 167, 76, 97, 121, 101, 114, 73, 68 };
        // Weight
        private static global::System.ReadOnlySpan<byte> GetSpan_Weight() => new byte[1 + 6] { 166, 87, 101, 105, 103, 104, 116 };
        // NormalizedTimeTime
        private static global::System.ReadOnlySpan<byte> GetSpan_NormalizedTimeTime() => new byte[1 + 18] { 178, 78, 111, 114, 109, 97, 108, 105, 122, 101, 100, 84, 105, 109, 101, 84, 105, 109, 101 };
        // Speed
        private static global::System.ReadOnlySpan<byte> GetSpan_Speed() => new byte[1 + 5] { 165, 83, 112, 101, 101, 100 };
        // IntParams
        private static global::System.ReadOnlySpan<byte> GetSpan_IntParams() => new byte[1 + 9] { 169, 73, 110, 116, 80, 97, 114, 97, 109, 115 };
        // FloatParams
        private static global::System.ReadOnlySpan<byte> GetSpan_FloatParams() => new byte[1 + 11] { 171, 70, 108, 111, 97, 116, 80, 97, 114, 97, 109, 115 };
        // BoolParams
        private static global::System.ReadOnlySpan<byte> GetSpan_BoolParams() => new byte[1 + 10] { 170, 66, 111, 111, 108, 80, 97, 114, 97, 109, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::GameServer.Protocol.AnimationData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_ObjectID());
            writer.Write(value.ObjectID);
            writer.WriteRaw(GetSpan_StateHash());
            writer.Write(value.StateHash);
            writer.WriteRaw(GetSpan_LayerID());
            writer.Write(value.LayerID);
            writer.WriteRaw(GetSpan_Weight());
            writer.Write(value.Weight);
            writer.WriteRaw(GetSpan_NormalizedTimeTime());
            writer.Write(value.NormalizedTimeTime);
            writer.WriteRaw(GetSpan_Speed());
            writer.Write(value.Speed);
            writer.WriteRaw(GetSpan_IntParams());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Serialize(ref writer, value.IntParams, options);
            writer.WriteRaw(GetSpan_FloatParams());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>(formatterResolver).Serialize(ref writer, value.FloatParams, options);
            writer.WriteRaw(GetSpan_BoolParams());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, bool>>(formatterResolver).Serialize(ref writer, value.BoolParams, options);
        }

        public global::GameServer.Protocol.AnimationData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::GameServer.Protocol.AnimationData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 4920592038131032655UL) { goto FAIL; }

                        ____result.ObjectID = reader.ReadInt32();
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8314005987684086867UL:
                                if (stringKey[0] != 104) { goto FAIL; }

                                ____result.StateHash = reader.ReadInt32();
                                continue;

                            case 7881706585162280521UL:
                                if (stringKey[0] != 115) { goto FAIL; }

                                ____result.IntParams = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 19221054093877580UL) { goto FAIL; }

                        ____result.LayerID = reader.ReadInt32();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127991760381271UL) { goto FAIL; }

                        ____result.Weight = reader.ReadSingle();
                        continue;
                    case 18:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_NormalizedTimeTime().Slice(1))) { goto FAIL; }

                        ____result.NormalizedTimeTime = reader.ReadSingle();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 431197876307UL) { goto FAIL; }

                        ____result.Speed = reader.ReadSingle();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FloatParams().Slice(1))) { goto FAIL; }

                        ____result.FloatParams = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BoolParams().Slice(1))) { goto FAIL; }

                        ____result.BoolParams = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, bool>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
