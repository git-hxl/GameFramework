// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameServer.Protocol
{
    public sealed class SyncEventRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameServer.Protocol.SyncEventRequest>
    {
        // PlayerID
        private static global::System.ReadOnlySpan<byte> GetSpan_PlayerID() => new byte[1 + 8] { 168, 80, 108, 97, 121, 101, 114, 73, 68 };
        // SyncEventCode
        private static global::System.ReadOnlySpan<byte> GetSpan_SyncEventCode() => new byte[1 + 13] { 173, 83, 121, 110, 99, 69, 118, 101, 110, 116, 67, 111, 100, 101 };
        // SyncData
        private static global::System.ReadOnlySpan<byte> GetSpan_SyncData() => new byte[1 + 8] { 168, 83, 121, 110, 99, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::GameServer.Protocol.SyncEventRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_PlayerID());
            writer.Write(value.PlayerID);
            writer.WriteRaw(GetSpan_SyncEventCode());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::GameServer.SyncEventCode>(formatterResolver).Serialize(ref writer, value.SyncEventCode, options);
            writer.WriteRaw(GetSpan_SyncData());
            writer.Write(value.SyncData);
        }

        public global::GameServer.Protocol.SyncEventRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::GameServer.Protocol.SyncEventRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4920589848032668752UL:
                                ____result.PlayerID = reader.ReadInt32();
                                continue;
                            case 7022344665331300691UL:
                                ____result.SyncData = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                                continue;
                        }
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SyncEventCode().Slice(1))) { goto FAIL; }

                        ____result.SyncEventCode = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::GameServer.SyncEventCode>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
