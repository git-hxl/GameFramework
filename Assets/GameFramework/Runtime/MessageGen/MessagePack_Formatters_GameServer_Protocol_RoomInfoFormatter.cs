// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.GameServer.Protocol
{
    public sealed class RoomInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameServer.Protocol.RoomInfo>
    {
        // RoomID
        private static global::System.ReadOnlySpan<byte> GetSpan_RoomID() => new byte[1 + 6] { 166, 82, 111, 111, 109, 73, 68 };
        // RoomName
        private static global::System.ReadOnlySpan<byte> GetSpan_RoomName() => new byte[1 + 8] { 168, 82, 111, 111, 109, 78, 97, 109, 101 };
        // MasterID
        private static global::System.ReadOnlySpan<byte> GetSpan_MasterID() => new byte[1 + 8] { 168, 77, 97, 115, 116, 101, 114, 73, 68 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::GameServer.Protocol.RoomInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_RoomID());
            writer.Write(value.RoomID);
            writer.WriteRaw(GetSpan_RoomName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            writer.WriteRaw(GetSpan_MasterID());
            writer.Write(value.MasterID);
        }

        public global::GameServer.Protocol.RoomInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::GameServer.Protocol.RoomInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 75082159320914UL) { goto FAIL; }

                        ____result.RoomID = reader.ReadInt32();
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604759763545938UL:
                                ____result.RoomName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 4920589847949959501UL:
                                ____result.MasterID = reader.ReadInt32();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
